<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Drone Swarm Simulation - Leera School</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: linear-gradient(to bottom, #001028, #021F3F, #04477A);
      font-family: Arial, sans-serif;
      color: white;
    }
    #title {
      position: absolute;
      top: 20px;
      width: 100%;
      text-align: center;
      font-size: 1.5em;
      font-weight: bold;
      letter-spacing: 2px;
      z-index: 10;
    }
  </style>
</head>
<body>
  <div id="title">ðŸ›¸ Leera School Drone Swarm Simulation</div>
  <canvas id="swarm"></canvas>

  <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/controls/OrbitControls.js"></script>
  <script>
    const canvas = document.querySelector('#swarm');
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 30, 100);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    const ambient = new THREE.AmbientLight(0xffffff, 0.6);
    const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
    dirLight.position.set(10, 20, 10);
    scene.add(ambient, dirLight);

    // Create drone swarm
    const drones = [];
    const droneGeometry = new THREE.SphereGeometry(0.8, 16, 16);
    const droneMaterial = new THREE.MeshStandardMaterial({ color: 0x00ffff, emissive: 0x0077ff });

    for (let i = 0; i < 80; i++) {
      const drone = new THREE.Mesh(droneGeometry, droneMaterial);
      drone.position.set(
        (Math.random() - 0.5) * 60,
        Math.random() * 40,
        (Math.random() - 0.5) * 60
      );
      scene.add(drone);
      drones.push(drone);
    }

    // Drone motion pattern
    function animate(time) {
      requestAnimationFrame(animate);
      const t = time * 0.001;

      drones.forEach((d, i) => {
        d.position.x = Math.sin(t + i) * 30 * Math.sin(i / 5);
        d.position.y = 15 + Math.sin(t * 2 + i) * 10;
        d.position.z = Math.cos(t + i) * 30 * Math.cos(i / 5);
        d.rotation.y += 0.02;
      });

      controls.update();
      renderer.render(scene, camera);
    }

    animate(0);

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
